/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package AffichageCollection;

import API.Comic;
import API.api_connection;
import Collec.Comic_Collec;
import User.User;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import prinfo.AffichageDetailsComic;
import javax.swing.SwingConstants;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.Dimension;
import javax.swing.JButton;
import javax.swing.JLabel;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.BoxLayout;
import java.awt.Component;

/**
 *
 * @author Alexi
 */
public class ComicPanelCollection extends javax.swing.JPanel {
    private  User user;
    private Comic_Collec comic;
    private UserSeriePanel usp;
    /**
     * Creates new form ComicPanelCollection
     * @param user
     * @param c
     */
    public ComicPanelCollection(User user,Comic_Collec c,UserSeriePanel usp) {
        initComponents();
        this.user=user;
        this.comic=c;
        this.usp=usp;
        setLayout(null);
        add(iconLink);
        add(titre);
        add(box_possede);
        add(box_lu);
        add(deleteBtn);
        InitComicPanelCollection();
    }
    
    public void InitComicPanelCollection(){
        box_lu.setVisible(true);
        box_possede.setVisible(true);
        box_lu.setSelected(((comic.getEtat()==2) || (comic.getEtat()==4)));
        box_possede.setSelected((comic.getEtat()>2));
        deleteBtn.setVisible(true);
        deleteBtn.setSelected(false);
        titre.setText(this.comic.getName());
        ImageIcon img = null;
        try {
            img = new ImageIcon(new URL(comic.getIconLink()));
        } catch (Exception ex) {
            Logger.getLogger(ComicPanelCollection.class.getName()).log(Level.SEVERE, null, ex);
        }
        iconLink.setIcon(img);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titre = new javax.swing.JLabel();
        titre.setBounds(0, 0, 127, 13);
        titre.setAlignmentY(Component.BOTTOM_ALIGNMENT);
        titre.setAlignmentX(Component.RIGHT_ALIGNMENT);
        iconLink = new javax.swing.JLabel();
        iconLink.setBounds(0, 23, 127, 109);
        box_lu = new javax.swing.JCheckBox();
        box_lu.setBounds(82, 135, 39, 23);
        box_lu.setHorizontalAlignment(SwingConstants.LEFT);
        box_lu.setFont(new Font("Dialog", Font.BOLD, 10));
        box_possede = new javax.swing.JCheckBox();
        box_possede.setBounds(0, 135, 67, 23);
        box_possede.setAlignmentX(Component.CENTER_ALIGNMENT);
        box_possede.setAlignmentY(Component.TOP_ALIGNMENT);
        box_possede.setFont(new Font("Dialog", Font.BOLD, 10));
        box_possede.setHorizontalAlignment(SwingConstants.LEFT);

        setBackground(new java.awt.Color(51, 51, 51));
        setPreferredSize(new Dimension(127, 195));

        titre.setBackground(new java.awt.Color(51, 51, 51));
        titre.setForeground(new java.awt.Color(255, 255, 255));
        titre.setHorizontalAlignment(SwingConstants.CENTER);
        titre.setText("nom");
        titre.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        iconLink.setBackground(new java.awt.Color(51, 51, 51));
        iconLink.setHorizontalAlignment(SwingConstants.CENTER);
        iconLink.setHorizontalTextPosition(SwingConstants.CENTER);
        iconLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconLinkMouseClicked(evt);
            }
        });

        box_lu.setBackground(new java.awt.Color(51, 51, 51));
        box_lu.setForeground(new java.awt.Color(255, 255, 255));
        box_lu.setText("Lu");
        box_lu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxActionPerformed(evt);
            }
        });

        box_possede.setBackground(new java.awt.Color(51, 51, 51));
        box_possede.setForeground(new java.awt.Color(255, 255, 255));
        box_possede.setText("Possédé");
        box_possede.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxActionPerformed(evt);
            }
        });
        deleteBtn= new javax.swing.JButton();
        deleteBtn.setBounds(0, 160, 127, 33);
        deleteBtn.setText("Supprimer");
        deleteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
        	public void mouseClicked(java.awt.event.MouseEvent evt) {
        		deleteBtnActionPerformed(evt);
        	}
        });
        deleteBtn.setEnabled(false);
        deleteBtn.setFont(new Font("Dialog", Font.BOLD, 10));
        deleteBtn.setBackground(new Color(51, 51, 51));
        deleteBtn.setForeground(new Color(51, 51, 51));
    }// </editor-fold>//GEN-END:initComponents

    private void iconLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconLinkMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
            try {
                api_connection apiConnection = new api_connection();
                AffichageDetailsComic affichageDetailsComic =
                        new AffichageDetailsComic(apiConnection.getComic(this.comic.getId()));
                affichageDetailsComic.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(ComicPanelCollection.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_iconLinkMouseClicked

    private void boxActionPerformed(java.awt.event.ActionEvent evt) {
        int state;
    	if (box_lu.isSelected()) {
			if (box_possede.isSelected()) {
				state=4;
			} else {
				state=2;
			}
		}
    	else {
    		if (box_possede.isSelected()) {
				state=3;
			} else {
				state=1;
			}
    	}
        user.changeUserComicStatus(comic, state);
    }

    private void deleteBtnActionPerformed(java.awt.event.MouseEvent evt) {//GEN-FIRST:deleteBtnActionPerformed
    	if (!deleteBtn.isEnabled()) {
    		deleteBtn.setEnabled(false);
    		user.changeUserComicStatus(comic, 0);
    		usp.deleteComic(this);//Ask the parent panel to destroy this panel   		
		}
    	
    }//GEN-LAST:deleteBtnActionPerformed
    public Comic_Collec getPanelComic() {
		return this.comic;
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox box_lu;
    private javax.swing.JCheckBox box_possede;
    private javax.swing.JLabel iconLink;
    private javax.swing.JLabel titre;
    private javax.swing.JButton deleteBtn;
}
